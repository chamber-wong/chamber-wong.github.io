---
layout:     post
title:      "java基础之排序"
subtitle:   "冒泡排序和快速排序"
date:       2018-07-27 12:00:00
author:     "Chamber"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - java
    - Java基础
    - 冒泡排序
    - 数据类型
    - 快速排序
---
## 数组

> 一位数组:直接存数的是数据
>
>二维数组:内部存储的是多个一位数组的地址(二维数组中就是多个一维数组)

#### 二维数组

创建二维数组

```
int[][] arr1 = new int[2][];
//或者
int[][] arr2 = {{1,2,3,4,5,6,7},{9,8}};

//存值--根据下标
arr1[0] = new int[]{3,4,5};
arr1[1] = new int[]{3,4};

//取值 构成,数组的名字+[一位数组的下标]+[一位数组中元素的下标]
int value = arr1[0][0];

//遍历
for(int i = 0; i < arr1.length; i++){
    for(int j = 0; j < arr1[i].length; j++){
        System.out.println(arr1[i][j]);
    }
}
```

## 数组的查找.排序

### 排序

#### 冒泡排序
```
public void bubbleSort(int[] arr) {
		for (int i = 0; i < arr.length-1; i++) {
			for (int j = 0; j < arr.length-1; j++) {
				if (arr[j] > arr[j+1]) {
					arr[j] = arr[j] ^ arr[j+1];
					arr[j+1] = arr[j] ^ arr[j+1];
					arr[j] = arr[j] ^ arr[j+1];
				}
			}
		}
	}
```


### 查找

- 注意点
-                                  
1. 插到值时-返回下标                  
2. 查不到值--返回-1                     
3. 有相同值时--返回查到的第一个值的下标 


#### 普通查找:     

```
public int search(int[] arr,int key) {
		for (int i = 0; i < arr.length; i++) {
			if (key == arr[i]) {
				return arr[i];
			}
		}
		return -1;
	}
```

#### 二分查找:  

> 二分查找前需要先排序

```
public int erFenSerach(int[] arr,int key) {
		int l = 0;
		int h = arr.length-1;
		while(l<=h) {
			int m = (l+h)>>1;
			if (key == arr[m]) {
			return m;
			}else if (key > arr[m]) {
				l = m+1;
			}else if (key < arr[m]) {
				h= m-1;
			}
		}
		return -1;//没有查到值
```


## 面向对象

#### 什么是面向对象?

1. 面向对象是基于面向过程的
2. 面向对象与面向过程都是思想
3. 面向对象比面向过程更高级
4. 面向对象更强调的是对象,面向过程强调的是功能
5. 面向对象更加符合人的思考习惯
6. 面向对象使人从执行者变成了指挥者
