---
layout:     post
title:      "java基础之数据类型"
subtitle:   "来自小白对Java的理解"
date:       2018-7-15 12:00:00
author:     "Chamber"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - java
    - Java基础
    - 数据类型
---
## 数据类型:
>决定了变量所占内存控件的大小,并且给变量确定了类型.
分类:有符号型(有负数,0,正数)和无符号型(只有0和正数)

主要研究有符号型:两类:
#### 1. 简单数据类型<br>
有符号数据,二进制最高位表示符号位,0为正,1为负<br/>

---

数值型 | 浮点型 | 字符型
---|--- |---
byte(一个字节) |float(四个字节) | char (一个字节)
short(两个字节)  | double(八个字节)| -
 int(四个字节) | - | -
long(八个字节)  | - | -

> 注意 :
所有小数默认是double,如果使用float需要在小数后加f

- 对应的字符集为ASCII--世界通用标准
- 0--48 A--65 a--97
- 常用的字符集:GBK/GB2312 中国标准(2个字节) ISO8858-1欧洲 (一个字节) UTF-8 国际标准(三个字节) Unicode 内部标准(两个字节)  一个汉字对应2个字节


1. 编码:我们将字符(字符串)通过字符集转成对应的二进制形式
1. 解码:反之解码
1. 乱码:在编码和解码过程中使用的字符集不一致,造成了错误



#### 2. 引用数据类型

> 引用数据变量中存储的的是地址,并且是16进制的数据

## 数据类型的转换

1. 数据类型之间的转换
> 数据的类型等级高低(根据数据的范围划分):从低到高:byte,char,short,int,long,float,double

<b>自动类型转换:</b>从低等级到高等级,不会造成数据的损失,但是可能浪费一些内存.<br>
<b>强制类型转换:</b>从高等级到低等级,有可能会造成数据的损失.<br>


```
//强制类型转化实例
int num = 128;
byte num1 = (byte)num;
System.out.println(num1);
// num = -128;


//实例二 正数默认是int型
byte num2 = 20;
num2 = (byte)(num2+2);


//实例三
char c1 = 'c';
int c2 = c1;
System.out.println((int)c1);
System.out.println(c1+2);
//99  e
```

## 运算符
#### 从功能分类
1. 算数运算符 + - / * % ++ -- 
2. 赋值运算符  += -= *= /= %=
3. 关系运算符 >  <  <=  >=  !=  ==
4. 逻辑运算符  &&(与)  ||(或)   !(非)
5. 位运算符:直接操作的是位 &(按位与) |(按位或) ^(按位异或) ~(按位取反)
> &(按位与):全1则1
> 
> |(按位或):全0则0,有1则1 
> 
> ^(按位异或):参与运算的当前位相同则是0,不同则是1 
> 
> ~(按位取反):1就取0,0就取1


6. 移位运算符:

 直接操作的位 >>1
 
 右移一位:代表除以二  <<1
 
 左移一位,代表乘以二
 
 移位运算符只能对整数进行运算

```
//算数运算符
int a = 3,b = 4;
System.out.println(-2/-1);//整数相除得到的一定是整数   与普通的运算规则一致
System.out.println(3%-2);//余数的符号与被余数一致

//++(自增) --(自减)
//当++在变量的后面时,变量会使用当前的值先参与运算,之后再自身加一
//当++在变量的前面是=时,变量会首先自身加一,之后使用当前的值在参与运算
int q = 2,w = 1,y = 0,x;
x = q++;
y = ++w;
//---->x=2  y=2

//实例:算n m u o的值
int n=2,m=3,u=1,o=0;
o=n++ - --m +(u++ - n--);
/*
*实例的分析:先考虑优先级,优先级相同在考虑结合性,先考虑优先级低的,使用排除法将优先极高的找出来,再一步步运算
*1.先考虑=,使用排除法,根据右结合性,先算=的右边
*2.在考虑()外的-,+,根据左结合性
*3.算n++ n=3 n++=2
*4.算 --m m=2 --m=2
*5.算() (1-3) u=2 n=2
*6.算2中的-+ 2-2+(1-3)=-2
*7.算= 将值付给o=-2
*/


//实例:使用异或运算符交换两个变量的值
int a=1,b=2;
a = a ^ b;
b = a ^ b;
a = a ^ b;

//移位运算符
System.out.println(5>>1);//右移一位,相当于除以2,--->2
//先左移再右移,结果一定和原来的一样
//先右移再左移,结果不一定和原来的一样
```
>- <b><font color="red">注意</font></b>
>- <b>短路与:</b>当有多个&&连接的时候,从左往右运算,只要得到一个false,后悔停止运算,整个的结果就是false
>- <b>短路或:</b>当有多个||连接的时候,从左往右运算,只要得到一个true,就会停止运算,整个的结果就是true
#### 按运算符操作的元素分类

一元运算符 ++  -- ~ ! 

二元运算符 + -  * / 

三元运算符: 三目运算符:?:---表达式移<表达式二?变量一:变量二
>解释:先让表达式一与表达式二比较,如果结果是true,整个式子的结果就是变量一的值,否则是变量二的值
```
//利用三目运算符求两个数的最大值
int a = 3,b = 5;
System.out.println(a < b ? a : b);
```

## 逻辑语句
> if 和 swich
